// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v57deDbCRSiUfTDw1tW741
// Component: Vr6w4OQ1QIr8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: b2vEI7YNG0dM/codeComponent
import Button from "../../Button"; // plasmic-import: fg07TcMEp1vM/component
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button2 from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import TextInput from "../../TextInput"; // plasmic-import: WeG-0Eugh_P9/component

import { useScreenVariants as useScreenVariants_6Zx2C3KdhG } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6ZX-_2C3kdhG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: v57deDbCRSiUfTDw1tW741/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: Vr6w4OQ1QIr8/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: srpZpCYAa_Ql/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Hw4uH64OkDA1/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: 8DKb3GABQJwG/icon
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: evTl-3AIin7I/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: P-khE6MRpQH5/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: SSwrcuzlli4Z/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: Dw9Kw-Ug9oZZ/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: pwWlXfOSGjYC/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: QfKkGFij0xBD/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: QRd2eX6oFzLw/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: KIkecbYpwuHF/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: DsAf4MvKUgnF/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  section?: Flex__<"section">;
  fragmentprofile?: Flex__<typeof ApiRequest>;
  loadingSvg?: Flex__<"svg">;
  shareButtons?: Flex__<"div">;
  link6?: Flex__<"svg">;
  x12?: Flex__<"svg">;
  whatsapp12?: Flex__<"svg">;
  telegram12?: Flex__<"svg">;
  eitaa12?: Flex__<"svg">;
  eitaaButton?: Flex__<typeof Button>;
  x5?: Flex__<"svg">;
  whatsapp5?: Flex__<"svg">;
  telegram5?: Flex__<"svg">;
  eitaa5?: Flex__<"svg">;
  whatsappButton?: Flex__<typeof Button>;
  x2?: Flex__<"svg">;
  whatsapp2?: Flex__<"svg">;
  telegram2?: Flex__<"svg">;
  eitaa2?: Flex__<"svg">;
  telegramButton?: Flex__<typeof Button>;
  x3?: Flex__<"svg">;
  whatsapp3?: Flex__<"svg">;
  telegram3?: Flex__<"svg">;
  eitaa3?: Flex__<"svg">;
  businessCardImage?: Flex__<typeof PlasmicImg__>;
  collapse?: Flex__<typeof AntdSingleCollapse>;
  textarea?: Flex__<"textarea">;
  x4?: Flex__<"svg">;
  whatsapp4?: Flex__<"svg">;
  telegram4?: Flex__<"svg">;
  eitaa4?: Flex__<"svg">;
  link3?: Flex__<"svg">;
  dialog?: Flex__<typeof Dialog>;
  contact?: Flex__<typeof TextInput>;
  x?: Flex__<"svg">;
  whatsapp?: Flex__<"svg">;
  telegram?: Flex__<"svg">;
  eitaa?: Flex__<"svg">;
  link2?: Flex__<"svg">;
};

export interface DefaultHomepageProps {}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "fragmentprofile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentprofile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentprofile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "printableFileName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "contact.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "collapse.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "printableFilePreview",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Zx2C3KdhG()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
          onLoad={async event => {
            const $steps = {};

            $steps["updateStateVariable"] = true
              ? (() => {
                  const actionArgs = {};
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;
                    undefined;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateStateVariable"] != null &&
              typeof $steps["updateStateVariable"] === "object" &&
              typeof $steps["updateStateVariable"].then === "function"
            ) {
              $steps["updateStateVariable"] = await $steps[
                "updateStateVariable"
              ];
            }
          }}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var scriptTag = document.createElement("script");
                          scriptTag.type = "text/javascript";
                          scriptTag.text = `
   (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
   m[i].l=1*new Date();
   for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
   k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
   (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

   ym(98131041, "init", {
        clickmap:true,
        trackLinks:true,
        accurateTrackBounce:true,
        webvisor:true
   });
`;
                          var noscriptTag = document.createElement("noscript");
                          noscriptTag.innerHTML =
                            '<div><img src="https://mc.yandex.ru/watch/98131041" style="position:absolute; left:-9999px;" alt="" /></div>';
                          document.head.appendChild(scriptTag);
                          return document.head.appendChild(noscriptTag);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2___0PpB
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__sRwPf
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0628\u0647\u062a\u0631 \u062f\u06cc\u062f\u0647 \u0634\u0648\u06cc\u062f "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#028C00" }}
                      >
                        {
                          "(\u0646\u0633\u062e\u0647 \u0622\u0632\u0645\u0627\u06cc\u0634\u06cc)"
                        }
                      </span>
                    </React.Fragment>
                  </h2>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </h2>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cMyJ1
              )}
            >
              {
                "\u0628\u0627 \u06a9\u0645\u062a\u0631\u06cc\u0646 \u0632\u062d\u0645\u062a \u0648 \u0628\u0647\u062a\u0631\u06cc\u0646 \u06a9\u06cc\u0641\u06cc\u062a \u0635\u0641\u062d\u0647 \u062e\u0648\u062f \u0631\u0627 \u062a\u0628\u0644\u06cc\u063a \u06a9\u0646\u06cc\u062f"
              }
            </div>
            <ApiRequest
              data-plasmic-name={"fragmentprofile"}
              data-plasmic-override={overrides.fragmentprofile}
              className={classNames("__wab_instance", sty.fragmentprofile)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bGukl
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.fragmentprofile.error.message;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Error fetching data";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
              loadingDisplay={
                <React.Fragment>
                  <Icon3Icon
                    data-plasmic-name={"loadingSvg"}
                    data-plasmic-override={overrides.loadingSvg}
                    className={classNames(projectcss.all, sty.loadingSvg)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qLXa
                    )}
                  >
                    {
                      "\u062f\u0631\u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a .."
                    }
                  </div>
                </React.Fragment>
              }
              method={"GET"}
              onError={generateStateOnChangeProp($state, [
                "fragmentprofile",
                "error"
              ])}
              onLoading={generateStateOnChangeProp($state, [
                "fragmentprofile",
                "loading"
              ])}
              onSuccess={generateStateOnChangeProp($state, [
                "fragmentprofile",
                "data"
              ])}
              params={(() => {
                try {
                  return {
                    user_id: $ctx.query.user_id
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              url={"https://srezas-n8n.darkube.app/webhook/shortener"}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qpHpZ)}
              >
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__fkn4N
                  )}
                >
                  {
                    "\u0622\u062f\u0631\u0633 \u0633\u0631\u0631\u0627\u0633\u062a"
                  }
                </h4>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dHOqh
                  )}
                >
                  {
                    "\u0628\u0627 \u0644\u06cc\u0646\u06a9 \u06a9\u0648\u062a\u0627\u0647 \u0632\u06cc\u0631 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\u062a\u0627\u0646 \u0631\u0627 \u0628\u0647 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0628\u06af\u0630\u0627\u0631\u06cc\u062f."
                  }
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"shareButtons"}
                  data-plasmic-override={overrides.shareButtons}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.shareButtons)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__lk5If)}
                    color={"softBlue"}
                    endIcon={
                      <React.Fragment>
                        <Icon14Icon
                          data-plasmic-name={"x12"}
                          data-plasmic-override={overrides.x12}
                          className={classNames(projectcss.all, sty.x12)}
                          role={"img"}
                        />

                        <Icon11Icon
                          data-plasmic-name={"whatsapp12"}
                          data-plasmic-override={overrides.whatsapp12}
                          className={classNames(projectcss.all, sty.whatsapp12)}
                          role={"img"}
                        />

                        <Icon7Icon
                          data-plasmic-name={"telegram12"}
                          data-plasmic-override={overrides.telegram12}
                          className={classNames(projectcss.all, sty.telegram12)}
                          role={"img"}
                        />

                        <Icon9Icon
                          data-plasmic-name={"eitaa12"}
                          data-plasmic-override={overrides.eitaa12}
                          className={classNames(projectcss.all, sty.eitaa12)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return $$.copyToClipboard(
                                  $state.fragmentprofile.data.short_url
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "\u0644\u06cc\u0646\u06a9 \u06a9\u067e\u06cc \u0634\u062f",
                                "top-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    showEndIcon={true}
                    startIcon={
                      <React.Fragment>
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__loYBc)}
                          role={"img"}
                        />

                        <Icon13Icon
                          data-plasmic-name={"link6"}
                          data-plasmic-override={overrides.link6}
                          className={classNames(projectcss.all, sty.link6)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jTpx4
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.fragmentprofile.data.short_url;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u06a9\u067e\u06cc";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Button>
                  <Button
                    data-plasmic-name={"eitaaButton"}
                    data-plasmic-override={overrides.eitaaButton}
                    className={classNames("__wab_instance", sty.eitaaButton)}
                    color={"eitaa"}
                    endIcon={
                      <React.Fragment>
                        <Icon6Icon
                          data-plasmic-name={"x5"}
                          data-plasmic-override={overrides.x5}
                          className={classNames(projectcss.all, sty.x5)}
                          role={"img"}
                        />

                        <Icon5Icon
                          data-plasmic-name={"whatsapp5"}
                          data-plasmic-override={overrides.whatsapp5}
                          className={classNames(projectcss.all, sty.whatsapp5)}
                          role={"img"}
                        />

                        <Icon7Icon
                          data-plasmic-name={"telegram5"}
                          data-plasmic-override={overrides.telegram5}
                          className={classNames(projectcss.all, sty.telegram5)}
                          role={"img"}
                        />

                        <Icon9Icon
                          data-plasmic-name={"eitaa5"}
                          data-plasmic-override={overrides.eitaa5}
                          className={classNames(projectcss.all, sty.eitaa5)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    link={(() => {
                      try {
                        return (() => {
                          return `https://eitaa.com/share/url?url=${$state.fragmentprofile.data.short_url}`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    showEndIcon={true}
                    target={true}
                  >
                    {"\u0627\u06cc\u062a\u0627"}
                  </Button>
                  <Button
                    data-plasmic-name={"whatsappButton"}
                    data-plasmic-override={overrides.whatsappButton}
                    className={classNames("__wab_instance", sty.whatsappButton)}
                    color={"whatsapp"}
                    endIcon={
                      <React.Fragment>
                        <Icon6Icon
                          data-plasmic-name={"x2"}
                          data-plasmic-override={overrides.x2}
                          className={classNames(projectcss.all, sty.x2)}
                          role={"img"}
                        />

                        <Icon11Icon
                          data-plasmic-name={"whatsapp2"}
                          data-plasmic-override={overrides.whatsapp2}
                          className={classNames(projectcss.all, sty.whatsapp2)}
                          role={"img"}
                        />

                        <Icon7Icon
                          data-plasmic-name={"telegram2"}
                          data-plasmic-override={overrides.telegram2}
                          className={classNames(projectcss.all, sty.telegram2)}
                          role={"img"}
                        />

                        <Icon9Icon
                          data-plasmic-name={"eitaa2"}
                          data-plasmic-override={overrides.eitaa2}
                          className={classNames(projectcss.all, sty.eitaa2)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    link={(() => {
                      try {
                        return (() => {
                          return `https://wa.me/?text=${$state.fragmentprofile.data.short_url}`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    showEndIcon={true}
                    target={true}
                  >
                    {"\u0648\u0627\u062a\u0633\u0627\u067e"}
                  </Button>
                  <Button
                    data-plasmic-name={"telegramButton"}
                    data-plasmic-override={overrides.telegramButton}
                    className={classNames("__wab_instance", sty.telegramButton)}
                    color={"telegram"}
                    endIcon={
                      <React.Fragment>
                        <Icon6Icon
                          data-plasmic-name={"x3"}
                          data-plasmic-override={overrides.x3}
                          className={classNames(projectcss.all, sty.x3)}
                          role={"img"}
                        />

                        <Icon5Icon
                          data-plasmic-name={"whatsapp3"}
                          data-plasmic-override={overrides.whatsapp3}
                          className={classNames(projectcss.all, sty.whatsapp3)}
                          role={"img"}
                        />

                        <Icon7Icon
                          data-plasmic-name={"telegram3"}
                          data-plasmic-override={overrides.telegram3}
                          className={classNames(projectcss.all, sty.telegram3)}
                          role={"img"}
                        />

                        <Icon9Icon
                          data-plasmic-name={"eitaa3"}
                          data-plasmic-override={overrides.eitaa3}
                          className={classNames(projectcss.all, sty.eitaa3)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    link={(() => {
                      try {
                        return (() => {
                          return `https://t.me/share/url?text=پروفایل دکتر ${$state.fragmentprofile.data.name} در پذیرش۲۴&url=${$state.fragmentprofile.data.short_url}`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    showEndIcon={true}
                    target={true}
                  >
                    {"\u062a\u0644\u06af\u0631\u0627\u0645"}
                  </Button>
                </Stack__>
              </Stack__>
            </ApiRequest>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rYk4)}
            >
              <h4
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4__z1Rhe
                )}
              >
                {"\u0686\u0627\u067e\u062e\u0640\u0640\u0627\u0646\u0647"}
              </h4>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gyCd
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {"\u062c\u0647\u062a \u062f\u0631\u06cc\u0627\u0641\u062a "}
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700, color: "#028C00" }}
                  >
                    {
                      "\u0641\u0627\u06cc\u0644 \u0642\u0627\u0628\u0644 \u0686\u0627\u067e \u0633\u0641\u0627\u0631\u0634\u06cc \u062e\u0648\u062f\u062a\u0627\u0646"
                    }
                  </span>
                  <React.Fragment>
                    {
                      "\u060c \u0631\u0648\u06cc \u062a\u0635\u0627\u0648\u06cc\u0631 \u0632\u06cc\u0631 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f."
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__apKhc)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__sBzvu)}>
                  <PlasmicImg__
                    data-plasmic-name={"businessCardImage"}
                    data-plasmic-override={overrides.businessCardImage}
                    alt={"business card"}
                    className={classNames(sty.businessCardImage)}
                    displayHeight={"470px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"786px"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updatePrintableFileName"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["printableFileName"]
                              },
                              operation: 0,
                              value: event.target.alt
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePrintableFileName"] != null &&
                        typeof $steps["updatePrintableFileName"] === "object" &&
                        typeof $steps["updatePrintableFileName"].then ===
                          "function"
                      ) {
                        $steps["updatePrintableFileName"] = await $steps[
                          "updatePrintableFileName"
                        ];
                      }

                      $steps["updateDialogOpen3"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["printableFilePreview"]
                              },
                              operation: 0,
                              value: event.target.src
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDialogOpen3"] != null &&
                        typeof $steps["updateDialogOpen3"] === "object" &&
                        typeof $steps["updateDialogOpen3"].then === "function"
                      ) {
                        $steps["updateDialogOpen3"] = await $steps[
                          "updateDialogOpen3"
                        ];
                      }

                      $steps["updatePrintableFileName2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dialog", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePrintableFileName2"] != null &&
                        typeof $steps["updatePrintableFileName2"] ===
                          "object" &&
                        typeof $steps["updatePrintableFileName2"].then ===
                          "function"
                      ) {
                        $steps["updatePrintableFileName2"] = await $steps[
                          "updatePrintableFileName2"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/barnama/images/businessCardjpg.jpg",
                      fullWidth: 1000,
                      fullHeight: 750,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__q56Vb)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__aCqHj)}
                  >
                    <PlasmicImg__
                      alt={"doctor page poster"}
                      className={classNames(sty.img__qllNf)}
                      displayHeight={"212px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"427px"}
                      loading={"lazy"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updatePrintableFileName"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["printableFileName"]
                                },
                                operation: 0,
                                value: event.target.alt
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePrintableFileName"] != null &&
                          typeof $steps["updatePrintableFileName"] ===
                            "object" &&
                          typeof $steps["updatePrintableFileName"].then ===
                            "function"
                        ) {
                          $steps["updatePrintableFileName"] = await $steps[
                            "updatePrintableFileName"
                          ];
                        }

                        $steps["updateDialogOpen2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["printableFilePreview"]
                                },
                                operation: 0,
                                value: event.target.src
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogOpen2"] != null &&
                          typeof $steps["updateDialogOpen2"] === "object" &&
                          typeof $steps["updateDialogOpen2"].then === "function"
                        ) {
                          $steps["updateDialogOpen2"] = await $steps[
                            "updateDialogOpen2"
                          ];
                        }

                        $steps["updatePrintableFileName2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePrintableFileName2"] != null &&
                          typeof $steps["updatePrintableFileName2"] ===
                            "object" &&
                          typeof $steps["updatePrintableFileName2"].then ===
                            "function"
                        ) {
                          $steps["updatePrintableFileName2"] = await $steps[
                            "updatePrintableFileName2"
                          ];
                        }
                      }}
                      src={{
                        src: "/plasmic/barnama/images/shopPosterFrameMockup1Jpg.jpg",
                        fullWidth: 1000,
                        fullHeight: 750,
                        aspectRatio: undefined
                      }}
                    />

                    <PlasmicImg__
                      alt={"enter without company poster"}
                      className={classNames(sty.img__phkRc)}
                      displayHeight={"183px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"495px"}
                      loading={"lazy"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updatePrintableFileName"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["printableFileName"]
                                },
                                operation: 0,
                                value: event.target.alt
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePrintableFileName"] != null &&
                          typeof $steps["updatePrintableFileName"] ===
                            "object" &&
                          typeof $steps["updatePrintableFileName"].then ===
                            "function"
                        ) {
                          $steps["updatePrintableFileName"] = await $steps[
                            "updatePrintableFileName"
                          ];
                        }

                        $steps["updateDialogOpen2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["printableFilePreview"]
                                },
                                operation: 0,
                                value: event.target.src
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogOpen2"] != null &&
                          typeof $steps["updateDialogOpen2"] === "object" &&
                          typeof $steps["updateDialogOpen2"].then === "function"
                        ) {
                          $steps["updateDialogOpen2"] = await $steps[
                            "updateDialogOpen2"
                          ];
                        }

                        $steps["updatePrintableFileName2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePrintableFileName2"] != null &&
                          typeof $steps["updatePrintableFileName2"] ===
                            "object" &&
                          typeof $steps["updatePrintableFileName2"].then ===
                            "function"
                        ) {
                          $steps["updatePrintableFileName2"] = await $steps[
                            "updatePrintableFileName2"
                          ];
                        }
                      }}
                      src={{
                        src: "/plasmic/barnama/images/posterMockup3Jpg.jpg",
                        fullWidth: 1000,
                        fullHeight: 750,
                        aspectRatio: undefined
                      }}
                    />
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ubVgg)}
                  >
                    <PlasmicImg__
                      alt={"please keep quiet poster"}
                      className={classNames(sty.img__znDb5)}
                      displayHeight={"166px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"459px"}
                      loading={"lazy"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updatePrintableFileName"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["printableFileName"]
                                },
                                operation: 0,
                                value: event.target.alt
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePrintableFileName"] != null &&
                          typeof $steps["updatePrintableFileName"] ===
                            "object" &&
                          typeof $steps["updatePrintableFileName"].then ===
                            "function"
                        ) {
                          $steps["updatePrintableFileName"] = await $steps[
                            "updatePrintableFileName"
                          ];
                        }

                        $steps["updateDialogOpen2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["printableFilePreview"]
                                },
                                operation: 0,
                                value: event.target.src
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogOpen2"] != null &&
                          typeof $steps["updateDialogOpen2"] === "object" &&
                          typeof $steps["updateDialogOpen2"].then === "function"
                        ) {
                          $steps["updateDialogOpen2"] = await $steps[
                            "updateDialogOpen2"
                          ];
                        }

                        $steps["updatePrintableFileName2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePrintableFileName2"] != null &&
                          typeof $steps["updatePrintableFileName2"] ===
                            "object" &&
                          typeof $steps["updatePrintableFileName2"].then ===
                            "function"
                        ) {
                          $steps["updatePrintableFileName2"] = await $steps[
                            "updatePrintableFileName2"
                          ];
                        }
                      }}
                      src={{
                        src: "/plasmic/barnama/images/posterMockup1Jpg.jpg",
                        fullWidth: 1000,
                        fullHeight: 750,
                        aspectRatio: undefined
                      }}
                    />

                    <PlasmicImg__
                      alt={"enter with one company poster"}
                      className={classNames(sty.img__di9Jz)}
                      displayHeight={"214px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"465px"}
                      loading={"lazy"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updatePrintableFileName"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["printableFileName"]
                                },
                                operation: 0,
                                value: event.target.alt
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePrintableFileName"] != null &&
                          typeof $steps["updatePrintableFileName"] ===
                            "object" &&
                          typeof $steps["updatePrintableFileName"].then ===
                            "function"
                        ) {
                          $steps["updatePrintableFileName"] = await $steps[
                            "updatePrintableFileName"
                          ];
                        }

                        $steps["updateDialogOpen2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["printableFilePreview"]
                                },
                                operation: 0,
                                value: event.target.src
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogOpen2"] != null &&
                          typeof $steps["updateDialogOpen2"] === "object" &&
                          typeof $steps["updateDialogOpen2"].then === "function"
                        ) {
                          $steps["updateDialogOpen2"] = await $steps[
                            "updateDialogOpen2"
                          ];
                        }

                        $steps["updatePrintableFileName2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePrintableFileName2"] != null &&
                          typeof $steps["updatePrintableFileName2"] ===
                            "object" &&
                          typeof $steps["updatePrintableFileName2"].then ===
                            "function"
                        ) {
                          $steps["updatePrintableFileName2"] = await $steps[
                            "updatePrintableFileName2"
                          ];
                        }
                      }}
                      src={{
                        src: "/plasmic/barnama/images/posterMockup4Jpg.jpg",
                        fullWidth: 1000,
                        fullHeight: 750,
                        aspectRatio: undefined
                      }}
                    />
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
            {(() => {
              const child$Props = {
                bordered: true,
                className: classNames("__wab_instance", sty.collapse),
                expandIconPosition: "end",
                ghost: false,
                headerClass: classNames({ [sty["pcls_8LURFZP-fbCY"]]: true }),
                label2: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gRkXe
                    )}
                  >
                    {
                      "\u067e\u06cc\u0634\u0646\u0647\u0627\u062f\u06cc \u062f\u0627\u0631\u06cc\u062f\u061f"
                    }
                  </div>
                ),
                onChange: generateStateOnChangePropForCodeComponents(
                  $state,
                  "open",
                  ["collapse", "open"],
                  AntdSingleCollapse_Helpers
                ),
                open: generateStateValueProp($state, ["collapse", "open"]),
                showArrow: true
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "open",
                    plasmicStateName: "collapse.open"
                  }
                ],
                [],
                AntdSingleCollapse_Helpers ?? {},
                child$Props
              );

              return (
                <AntdSingleCollapse
                  data-plasmic-name={"collapse"}
                  data-plasmic-override={overrides.collapse}
                  {...child$Props}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__lzoHs)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fmgt2
                      )}
                    >
                      {
                        "\u0627\u06af\u0631 \u0628\u0631\u0627\u06cc \u062a\u0633\u0647\u06cc\u0644 \u0628\u0647 \u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0631\u06cc \u06cc\u0627 \u062a\u0628\u0644\u06cc\u063a \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\u062a\u0627\u0646 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f\u06cc \u062f\u0627\u0631\u06cc\u062f \u06cc\u0627 \u062c\u0627\u06cc \u062e\u0627\u0644\u06cc \u0622\u06cc\u062a\u0645\u06cc \u0631\u0627 \u062f\u0631 \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647 \u0627\u062d\u0633\u0627\u0633 \u0645\u06cc\u200c\u06a9\u0646\u06cc\u062f\u060c \u0628\u0631\u0627\u06cc\u0645\u0627\u0646 \u0634\u0631\u062d \u0628\u062f\u0647\u06cc\u062f:"
                      }
                    </div>
                    <textarea
                      data-plasmic-name={"textarea"}
                      data-plasmic-override={overrides.textarea}
                      className={classNames(
                        projectcss.all,
                        projectcss.textarea,
                        sty.textarea
                      )}
                      onChange={e => {
                        generateStateOnChangeProp($state, [
                          "textarea",
                          "value"
                        ])(e.target.value);
                      }}
                      placeholder={
                        "\u0645\u062a\u0646 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f..."
                      }
                      ref={ref => {
                        $refs["textarea"] = ref;
                      }}
                      value={
                        generateStateValueProp($state, ["textarea", "value"]) ??
                        ""
                      }
                    />

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__nmH38
                      )}
                      color={"blue"}
                      endIcon={
                        <React.Fragment>
                          <Icon6Icon
                            data-plasmic-name={"x4"}
                            data-plasmic-override={overrides.x4}
                            className={classNames(projectcss.all, sty.x4)}
                            role={"img"}
                          />

                          <Icon11Icon
                            data-plasmic-name={"whatsapp4"}
                            data-plasmic-override={overrides.whatsapp4}
                            className={classNames(
                              projectcss.all,
                              sty.whatsapp4
                            )}
                            role={"img"}
                          />

                          <Icon7Icon
                            data-plasmic-name={"telegram4"}
                            data-plasmic-override={overrides.telegram4}
                            className={classNames(
                              projectcss.all,
                              sty.telegram4
                            )}
                            role={"img"}
                          />

                          <Icon9Icon
                            data-plasmic-name={"eitaa4"}
                            data-plasmic-override={overrides.eitaa4}
                            className={classNames(projectcss.all, sty.eitaa4)}
                            role={"img"}
                          />

                          <Icon17Icon
                            data-plasmic-name={"link3"}
                            data-plasmic-override={overrides.link3}
                            className={classNames(projectcss.all, sty.link3)}
                            role={"img"}
                          />
                        </React.Fragment>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDialogOpen2"] =
                          !$state.textarea.value.trim()
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0644\u0637\u0641\u0627\u064b \u0627\u0628\u062a\u062f\u0627 \u0645\u062a\u0646 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f",
                                    "top-center",
                                    5000
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["updateDialogOpen2"] != null &&
                          typeof $steps["updateDialogOpen2"] === "object" &&
                          typeof $steps["updateDialogOpen2"].then === "function"
                        ) {
                          $steps["updateDialogOpen2"] = await $steps[
                            "updateDialogOpen2"
                          ];
                        }

                        $steps["invokeGlobalAction"] =
                          !!$state.textarea.value.trim()
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://srezas-n8n.darkube.app/webhook/improvement-suggestion",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          user_id: $ctx.query.user_id,
                                          response: $state.textarea.value
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["updateDialogOpen3"] =
                          !!$state.textarea.value.trim()
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0631\u0633\u0627\u0644 \u0634\u062f",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["updateDialogOpen3"] != null &&
                          typeof $steps["updateDialogOpen3"] === "object" &&
                          typeof $steps["updateDialogOpen3"].then === "function"
                        ) {
                          $steps["updateDialogOpen3"] = await $steps[
                            "updateDialogOpen3"
                          ];
                        }
                      }}
                      showEndIcon={true}
                      size={"compact"}
                      submitsForm={false}
                    >
                      {"\u0627\u0631\u0633\u0627\u0644"}
                    </Button>
                  </Stack__>
                </AntdSingleCollapse>
              );
            })()}
          </section>
          <Dialog
            data-plasmic-name={"dialog"}
            data-plasmic-override={overrides.dialog}
            body={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bCWfe)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___29Nz)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $state.printableFilePreview;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bDcA2
                  )}
                  dir={"rtl"}
                >
                  {
                    "\u0644\u0637\u0641\u0627\u064b \u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f:"
                  }
                </div>
                <TextInput
                  data-plasmic-name={"contact"}
                  data-plasmic-override={overrides.contact}
                  className={classNames("__wab_instance", sty.contact)}
                  endIcon={
                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg__a5ZNh)}
                      role={"img"}
                    />
                  }
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["contact", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }}
                  placeholder={"09134455666"}
                  required={false}
                  showStartIcon={true}
                  startIcon={
                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg__zRwLn)}
                      role={"img"}
                    />
                  }
                  value={
                    generateStateValueProp($state, ["contact", "value"]) ?? ""
                  }
                />

                <Button
                  className={classNames("__wab_instance", sty.button__scTPc)}
                  color={"blue"}
                  endIcon={
                    <React.Fragment>
                      <Icon6Icon
                        data-plasmic-name={"x"}
                        data-plasmic-override={overrides.x}
                        className={classNames(projectcss.all, sty.x)}
                        role={"img"}
                      />

                      <Icon11Icon
                        data-plasmic-name={"whatsapp"}
                        data-plasmic-override={overrides.whatsapp}
                        className={classNames(projectcss.all, sty.whatsapp)}
                        role={"img"}
                      />

                      <Icon7Icon
                        data-plasmic-name={"telegram"}
                        data-plasmic-override={overrides.telegram}
                        className={classNames(projectcss.all, sty.telegram)}
                        role={"img"}
                      />

                      <Icon9Icon
                        data-plasmic-name={"eitaa"}
                        data-plasmic-override={overrides.eitaa}
                        className={classNames(projectcss.all, sty.eitaa)}
                        role={"img"}
                      />

                      <Icon15Icon
                        data-plasmic-name={"link2"}
                        data-plasmic-override={overrides.link2}
                        className={classNames(projectcss.all, sty.link2)}
                        role={"img"}
                      />
                    </React.Fragment>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDialogOpen2"] = !/^[0-9۰-۹]{11}$/.test(
                      $state.contact.value.trim()
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0644\u0637\u0641\u0627\u064b \u0634\u0645\u0627\u0631\u0647 \u062e\u0648\u062f \u0631\u0627 \u0628\u0647 \u062f\u0631\u0633\u062a\u06cc \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f",
                              "top-center",
                              5000
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogOpen2"] != null &&
                      typeof $steps["updateDialogOpen2"] === "object" &&
                      typeof $steps["updateDialogOpen2"].then === "function"
                    ) {
                      $steps["updateDialogOpen2"] = await $steps[
                        "updateDialogOpen2"
                      ];
                    }

                    $steps["invokeGlobalAction"] = !!/^[0-9۰-۹]{11}$/.test(
                      $state.contact.value.trim()
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://srezas-n8n.darkube.app/webhook/request-printable-file",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    user_id: $ctx.query.user_id,
                                    printable_file_name:
                                      $state.printableFileName,
                                    phone: $state.contact.value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateStateVariable"] = !!/^[0-9۰-۹]{11}$/.test(
                      $state.contact.value.trim()
                    )
                      ? (() => {
                          const actionArgs = { operation: 0, value: false };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStateVariable"] != null &&
                      typeof $steps["updateStateVariable"] === "object" &&
                      typeof $steps["updateStateVariable"].then === "function"
                    ) {
                      $steps["updateStateVariable"] = await $steps[
                        "updateStateVariable"
                      ];
                    }

                    $steps["updateDialogOpen3"] = !!/^[0-9۰-۹]{11}$/.test(
                      $state.contact.value.trim()
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "\u0628\u0647 \u0632\u0648\u062f\u06cc \u0644\u06cc\u0646\u06a9 \u062f\u0627\u0646\u0644\u0648\u062f\u062a\u0627\u0646 \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u200c\u0634\u0648\u062f",
                              "top-center"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogOpen3"] != null &&
                      typeof $steps["updateDialogOpen3"] === "object" &&
                      typeof $steps["updateDialogOpen3"].then === "function"
                    ) {
                      $steps["updateDialogOpen3"] = await $steps[
                        "updateDialogOpen3"
                      ];
                    }
                  }}
                  showEndIcon={true}
                  size={"compact"}
                  startIcon={
                    <Icon17Icon
                      className={classNames(projectcss.all, sty.svg__uCmKt)}
                      role={"img"}
                    />
                  }
                  submitsForm={false}
                >
                  {"\u062f\u0631\u06cc\u0627\u0641\u062a"}
                </Button>
              </Stack__>
            }
            className={classNames("__wab_instance", sty.dialog)}
            noTrigger={true}
            onOpenChange={generateStateOnChangeProp($state, ["dialog", "open"])}
            open={generateStateValueProp($state, ["dialog", "open"])}
            title={
              "\u062f\u0631\u06cc\u0627\u0641\u062a \u0641\u0627\u06cc\u0644"
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "section",
    "fragmentprofile",
    "loadingSvg",
    "shareButtons",
    "link6",
    "x12",
    "whatsapp12",
    "telegram12",
    "eitaa12",
    "eitaaButton",
    "x5",
    "whatsapp5",
    "telegram5",
    "eitaa5",
    "whatsappButton",
    "x2",
    "whatsapp2",
    "telegram2",
    "eitaa2",
    "telegramButton",
    "x3",
    "whatsapp3",
    "telegram3",
    "eitaa3",
    "businessCardImage",
    "collapse",
    "textarea",
    "x4",
    "whatsapp4",
    "telegram4",
    "eitaa4",
    "link3",
    "dialog",
    "contact",
    "x",
    "whatsapp",
    "telegram",
    "eitaa",
    "link2"
  ],
  sideEffect: ["sideEffect"],
  section: [
    "section",
    "fragmentprofile",
    "loadingSvg",
    "shareButtons",
    "link6",
    "x12",
    "whatsapp12",
    "telegram12",
    "eitaa12",
    "eitaaButton",
    "x5",
    "whatsapp5",
    "telegram5",
    "eitaa5",
    "whatsappButton",
    "x2",
    "whatsapp2",
    "telegram2",
    "eitaa2",
    "telegramButton",
    "x3",
    "whatsapp3",
    "telegram3",
    "eitaa3",
    "businessCardImage",
    "collapse",
    "textarea",
    "x4",
    "whatsapp4",
    "telegram4",
    "eitaa4",
    "link3"
  ],
  fragmentprofile: [
    "fragmentprofile",
    "loadingSvg",
    "shareButtons",
    "link6",
    "x12",
    "whatsapp12",
    "telegram12",
    "eitaa12",
    "eitaaButton",
    "x5",
    "whatsapp5",
    "telegram5",
    "eitaa5",
    "whatsappButton",
    "x2",
    "whatsapp2",
    "telegram2",
    "eitaa2",
    "telegramButton",
    "x3",
    "whatsapp3",
    "telegram3",
    "eitaa3"
  ],
  loadingSvg: ["loadingSvg"],
  shareButtons: [
    "shareButtons",
    "link6",
    "x12",
    "whatsapp12",
    "telegram12",
    "eitaa12",
    "eitaaButton",
    "x5",
    "whatsapp5",
    "telegram5",
    "eitaa5",
    "whatsappButton",
    "x2",
    "whatsapp2",
    "telegram2",
    "eitaa2",
    "telegramButton",
    "x3",
    "whatsapp3",
    "telegram3",
    "eitaa3"
  ],
  link6: ["link6"],
  x12: ["x12"],
  whatsapp12: ["whatsapp12"],
  telegram12: ["telegram12"],
  eitaa12: ["eitaa12"],
  eitaaButton: ["eitaaButton", "x5", "whatsapp5", "telegram5", "eitaa5"],
  x5: ["x5"],
  whatsapp5: ["whatsapp5"],
  telegram5: ["telegram5"],
  eitaa5: ["eitaa5"],
  whatsappButton: ["whatsappButton", "x2", "whatsapp2", "telegram2", "eitaa2"],
  x2: ["x2"],
  whatsapp2: ["whatsapp2"],
  telegram2: ["telegram2"],
  eitaa2: ["eitaa2"],
  telegramButton: ["telegramButton", "x3", "whatsapp3", "telegram3", "eitaa3"],
  x3: ["x3"],
  whatsapp3: ["whatsapp3"],
  telegram3: ["telegram3"],
  eitaa3: ["eitaa3"],
  businessCardImage: ["businessCardImage"],
  collapse: [
    "collapse",
    "textarea",
    "x4",
    "whatsapp4",
    "telegram4",
    "eitaa4",
    "link3"
  ],
  textarea: ["textarea"],
  x4: ["x4"],
  whatsapp4: ["whatsapp4"],
  telegram4: ["telegram4"],
  eitaa4: ["eitaa4"],
  link3: ["link3"],
  dialog: ["dialog", "contact", "x", "whatsapp", "telegram", "eitaa", "link2"],
  contact: ["contact"],
  x: ["x"],
  whatsapp: ["whatsapp"],
  telegram: ["telegram"],
  eitaa: ["eitaa"],
  link2: ["link2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  section: "section";
  fragmentprofile: typeof ApiRequest;
  loadingSvg: "svg";
  shareButtons: "div";
  link6: "svg";
  x12: "svg";
  whatsapp12: "svg";
  telegram12: "svg";
  eitaa12: "svg";
  eitaaButton: typeof Button;
  x5: "svg";
  whatsapp5: "svg";
  telegram5: "svg";
  eitaa5: "svg";
  whatsappButton: typeof Button;
  x2: "svg";
  whatsapp2: "svg";
  telegram2: "svg";
  eitaa2: "svg";
  telegramButton: typeof Button;
  x3: "svg";
  whatsapp3: "svg";
  telegram3: "svg";
  eitaa3: "svg";
  businessCardImage: typeof PlasmicImg__;
  collapse: typeof AntdSingleCollapse;
  textarea: "textarea";
  x4: "svg";
  whatsapp4: "svg";
  telegram4: "svg";
  eitaa4: "svg";
  link3: "svg";
  dialog: typeof Dialog;
  contact: typeof TextInput;
  x: "svg";
  whatsapp: "svg";
  telegram: "svg";
  eitaa: "svg";
  link2: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    section: makeNodeComponent("section"),
    fragmentprofile: makeNodeComponent("fragmentprofile"),
    loadingSvg: makeNodeComponent("loadingSvg"),
    shareButtons: makeNodeComponent("shareButtons"),
    link6: makeNodeComponent("link6"),
    x12: makeNodeComponent("x12"),
    whatsapp12: makeNodeComponent("whatsapp12"),
    telegram12: makeNodeComponent("telegram12"),
    eitaa12: makeNodeComponent("eitaa12"),
    eitaaButton: makeNodeComponent("eitaaButton"),
    x5: makeNodeComponent("x5"),
    whatsapp5: makeNodeComponent("whatsapp5"),
    telegram5: makeNodeComponent("telegram5"),
    eitaa5: makeNodeComponent("eitaa5"),
    whatsappButton: makeNodeComponent("whatsappButton"),
    x2: makeNodeComponent("x2"),
    whatsapp2: makeNodeComponent("whatsapp2"),
    telegram2: makeNodeComponent("telegram2"),
    eitaa2: makeNodeComponent("eitaa2"),
    telegramButton: makeNodeComponent("telegramButton"),
    x3: makeNodeComponent("x3"),
    whatsapp3: makeNodeComponent("whatsapp3"),
    telegram3: makeNodeComponent("telegram3"),
    eitaa3: makeNodeComponent("eitaa3"),
    businessCardImage: makeNodeComponent("businessCardImage"),
    collapse: makeNodeComponent("collapse"),
    textarea: makeNodeComponent("textarea"),
    x4: makeNodeComponent("x4"),
    whatsapp4: makeNodeComponent("whatsapp4"),
    telegram4: makeNodeComponent("telegram4"),
    eitaa4: makeNodeComponent("eitaa4"),
    link3: makeNodeComponent("link3"),
    dialog: makeNodeComponent("dialog"),
    contact: makeNodeComponent("contact"),
    x: makeNodeComponent("x"),
    whatsapp: makeNodeComponent("whatsapp"),
    telegram: makeNodeComponent("telegram"),
    eitaa: makeNodeComponent("eitaa"),
    link2: makeNodeComponent("link2"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
