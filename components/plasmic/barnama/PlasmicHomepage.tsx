// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v57deDbCRSiUfTDw1tW741
// Component: Vr6w4OQ1QIr8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: b2vEI7YNG0dM/codeComponent
import { Input } from "@/fragment/components/input"; // plasmic-import: RUNfWewnW4PM/codeComponent
import Button from "../../Button"; // plasmic-import: fg07TcMEp1vM/component

import { useScreenVariants as useScreenVariants_6Zx2C3KdhG } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6ZX-_2C3kdhG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: v57deDbCRSiUfTDw1tW741/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: Vr6w4OQ1QIr8/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: srpZpCYAa_Ql/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Hw4uH64OkDA1/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: 8DKb3GABQJwG/icon
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: evTl-3AIin7I/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: P-khE6MRpQH5/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: SSwrcuzlli4Z/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: Dw9Kw-Ug9oZZ/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: pwWlXfOSGjYC/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: QfKkGFij0xBD/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  h2?: Flex__<"h2">;
  fragmentprofile?: Flex__<typeof ApiRequest>;
  loadingSvg?: Flex__<"svg">;
  fragmentInput?: Flex__<typeof Input>;
  shareButtons?: Flex__<"div">;
  link4?: Flex__<"svg">;
  x7?: Flex__<"svg">;
  whatsapp7?: Flex__<"svg">;
  telegram7?: Flex__<"svg">;
  eitaa7?: Flex__<"svg">;
  eitaaButton?: Flex__<typeof Button>;
  x5?: Flex__<"svg">;
  whatsapp5?: Flex__<"svg">;
  telegram5?: Flex__<"svg">;
  eitaa5?: Flex__<"svg">;
  whatsappButton?: Flex__<typeof Button>;
  x2?: Flex__<"svg">;
  whatsapp2?: Flex__<"svg">;
  telegram2?: Flex__<"svg">;
  eitaa2?: Flex__<"svg">;
  telegramButton?: Flex__<typeof Button>;
  x3?: Flex__<"svg">;
  whatsapp3?: Flex__<"svg">;
  telegram3?: Flex__<"svg">;
  eitaa3?: Flex__<"svg">;
  twitterButton?: Flex__<typeof Button>;
  x4?: Flex__<"svg">;
  whatsapp4?: Flex__<"svg">;
  telegram4?: Flex__<"svg">;
  eitaa4?: Flex__<"svg">;
  fragmentbooking?: Flex__<typeof ApiRequest>;
  fragmentInput2?: Flex__<typeof Input>;
  shareButtons2?: Flex__<"div">;
  link5?: Flex__<"svg">;
  x8?: Flex__<"svg">;
  whatsapp8?: Flex__<"svg">;
  telegram8?: Flex__<"svg">;
  eitaa8?: Flex__<"svg">;
  eitaaButton2?: Flex__<typeof Button>;
  x6?: Flex__<"svg">;
  whatsapp6?: Flex__<"svg">;
  telegram6?: Flex__<"svg">;
  eitaa6?: Flex__<"svg">;
  whatsappButton2?: Flex__<typeof Button>;
  x9?: Flex__<"svg">;
  whatsapp9?: Flex__<"svg">;
  telegram9?: Flex__<"svg">;
  eitaa9?: Flex__<"svg">;
  telegramButton2?: Flex__<typeof Button>;
  x10?: Flex__<"svg">;
  whatsapp10?: Flex__<"svg">;
  telegram10?: Flex__<"svg">;
  eitaa10?: Flex__<"svg">;
  twitterButton2?: Flex__<typeof Button>;
  x11?: Flex__<"svg">;
  whatsapp11?: Flex__<"svg">;
  telegram11?: Flex__<"svg">;
  eitaa11?: Flex__<"svg">;
};

export interface DefaultHomepageProps {}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "fragmentprofile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentprofile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentprofile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.fragmentprofile.data.short_url;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentbooking.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentbooking.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentbooking.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.fragmentbooking.data.short_url;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Zx2C3KdhG()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
          onLoad={async event => {
            const $steps = {};

            $steps["updateStateVariable"] = true
              ? (() => {
                  const actionArgs = {};
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;
                    undefined;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateStateVariable"] != null &&
              typeof $steps["updateStateVariable"] === "object" &&
              typeof $steps["updateStateVariable"].then === "function"
            ) {
              $steps["updateStateVariable"] = await $steps[
                "updateStateVariable"
              ];
            }
          }}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2
              )}
            >
              {
                "\u0628\u0647\u062a\u0631 \u062f\u06cc\u062f\u0647 \u0634\u0648\u06cc\u062f"
              }
            </h2>
            <ApiRequest
              data-plasmic-name={"fragmentprofile"}
              data-plasmic-override={overrides.fragmentprofile}
              className={classNames("__wab_instance", sty.fragmentprofile)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bGukl
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.fragmentprofile.error.message;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Error fetching data";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
              loadingDisplay={
                <React.Fragment>
                  <Icon3Icon
                    data-plasmic-name={"loadingSvg"}
                    data-plasmic-override={overrides.loadingSvg}
                    className={classNames(projectcss.all, sty.loadingSvg)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qLXa
                    )}
                  >
                    {
                      "\u062f\u0631\u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a .."
                    }
                  </div>
                </React.Fragment>
              }
              method={"GET"}
              onError={generateStateOnChangeProp($state, [
                "fragmentprofile",
                "error"
              ])}
              onLoading={generateStateOnChangeProp($state, [
                "fragmentprofile",
                "loading"
              ])}
              onSuccess={generateStateOnChangeProp($state, [
                "fragmentprofile",
                "data"
              ])}
              params={(() => {
                try {
                  return {
                    user_id: $ctx.query.user_id
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              url={"https://srezas-n8n.darkube.app/webhook/shortener"}
            >
              <div className={classNames(projectcss.all, sty.freeBox__qpHpZ)}>
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__fkn4N
                  )}
                >
                  {
                    "\u0644\u06cc\u0646\u06a9 \u06a9\u0648\u062a\u0627\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0634\u0645\u0627"
                  }
                </h4>
                <Input
                  data-plasmic-name={"fragmentInput"}
                  data-plasmic-override={overrides.fragmentInput}
                  attributes={{ dir: "ltr" }}
                  className={classNames("__wab_instance", sty.fragmentInput)}
                  disabled={true}
                  onChange={generateStateOnChangeProp($state, [
                    "fragmentInput",
                    "value"
                  ])}
                  placeholder={``}
                  type={"text"}
                  value={generateStateValueProp($state, [
                    "fragmentInput",
                    "value"
                  ])}
                />

                <Stack__
                  as={"div"}
                  data-plasmic-name={"shareButtons"}
                  data-plasmic-override={overrides.shareButtons}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.shareButtons)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__s5VHv)}
                    color={"softBlue"}
                    endIcon={
                      <React.Fragment>
                        <Icon14Icon
                          data-plasmic-name={"x7"}
                          data-plasmic-override={overrides.x7}
                          className={classNames(projectcss.all, sty.x7)}
                          role={"img"}
                        />

                        <Icon11Icon
                          data-plasmic-name={"whatsapp7"}
                          data-plasmic-override={overrides.whatsapp7}
                          className={classNames(projectcss.all, sty.whatsapp7)}
                          role={"img"}
                        />

                        <Icon7Icon
                          data-plasmic-name={"telegram7"}
                          data-plasmic-override={overrides.telegram7}
                          className={classNames(projectcss.all, sty.telegram7)}
                          role={"img"}
                        />

                        <Icon9Icon
                          data-plasmic-name={"eitaa7"}
                          data-plasmic-override={overrides.eitaa7}
                          className={classNames(projectcss.all, sty.eitaa7)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return $$.copyToClipboard(
                                  $state.fragmentInput.value
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "\u0644\u06cc\u0646\u06a9 \u06a9\u067e\u06cc \u0634\u062f",
                                "top-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    showEndIcon={true}
                    startIcon={
                      <React.Fragment>
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__fCgLv)}
                          role={"img"}
                        />

                        <Icon13Icon
                          data-plasmic-name={"link4"}
                          data-plasmic-override={overrides.link4}
                          className={classNames(projectcss.all, sty.link4)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__myv0K
                      )}
                    >
                      {"\u06a9\u067e\u06cc"}
                    </div>
                  </Button>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uAe2D
                    )}
                  >
                    {
                      "\u06cc\u0627 \u0628\u0647 \u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0631\u06cc \u062f\u0631:"
                    }
                  </div>
                  <Button
                    data-plasmic-name={"eitaaButton"}
                    data-plasmic-override={overrides.eitaaButton}
                    className={classNames("__wab_instance", sty.eitaaButton)}
                    color={"eitaa"}
                    endIcon={
                      <React.Fragment>
                        <Icon6Icon
                          data-plasmic-name={"x5"}
                          data-plasmic-override={overrides.x5}
                          className={classNames(projectcss.all, sty.x5)}
                          role={"img"}
                        />

                        <Icon5Icon
                          data-plasmic-name={"whatsapp5"}
                          data-plasmic-override={overrides.whatsapp5}
                          className={classNames(projectcss.all, sty.whatsapp5)}
                          role={"img"}
                        />

                        <Icon7Icon
                          data-plasmic-name={"telegram5"}
                          data-plasmic-override={overrides.telegram5}
                          className={classNames(projectcss.all, sty.telegram5)}
                          role={"img"}
                        />

                        <Icon9Icon
                          data-plasmic-name={"eitaa5"}
                          data-plasmic-override={overrides.eitaa5}
                          className={classNames(projectcss.all, sty.eitaa5)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    link={(() => {
                      try {
                        return (() => {
                          return `https://eitaa.com/share/url?url=${$state.fragmentprofile.data.short_url}`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    showEndIcon={true}
                    target={true}
                  >
                    {"\u0627\u06cc\u062a\u0627"}
                  </Button>
                  <Button
                    data-plasmic-name={"whatsappButton"}
                    data-plasmic-override={overrides.whatsappButton}
                    className={classNames("__wab_instance", sty.whatsappButton)}
                    color={"whatsapp"}
                    endIcon={
                      <React.Fragment>
                        <Icon6Icon
                          data-plasmic-name={"x2"}
                          data-plasmic-override={overrides.x2}
                          className={classNames(projectcss.all, sty.x2)}
                          role={"img"}
                        />

                        <Icon11Icon
                          data-plasmic-name={"whatsapp2"}
                          data-plasmic-override={overrides.whatsapp2}
                          className={classNames(projectcss.all, sty.whatsapp2)}
                          role={"img"}
                        />

                        <Icon7Icon
                          data-plasmic-name={"telegram2"}
                          data-plasmic-override={overrides.telegram2}
                          className={classNames(projectcss.all, sty.telegram2)}
                          role={"img"}
                        />

                        <Icon9Icon
                          data-plasmic-name={"eitaa2"}
                          data-plasmic-override={overrides.eitaa2}
                          className={classNames(projectcss.all, sty.eitaa2)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    link={(() => {
                      try {
                        return (() => {
                          return `https://wa.me/?text=${$state.fragmentprofile.data.short_url}`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    showEndIcon={true}
                    target={true}
                  >
                    {"\u0648\u0627\u062a\u0633\u0627\u067e"}
                  </Button>
                  <Button
                    data-plasmic-name={"telegramButton"}
                    data-plasmic-override={overrides.telegramButton}
                    className={classNames("__wab_instance", sty.telegramButton)}
                    color={"telegram"}
                    endIcon={
                      <React.Fragment>
                        <Icon6Icon
                          data-plasmic-name={"x3"}
                          data-plasmic-override={overrides.x3}
                          className={classNames(projectcss.all, sty.x3)}
                          role={"img"}
                        />

                        <Icon5Icon
                          data-plasmic-name={"whatsapp3"}
                          data-plasmic-override={overrides.whatsapp3}
                          className={classNames(projectcss.all, sty.whatsapp3)}
                          role={"img"}
                        />

                        <Icon7Icon
                          data-plasmic-name={"telegram3"}
                          data-plasmic-override={overrides.telegram3}
                          className={classNames(projectcss.all, sty.telegram3)}
                          role={"img"}
                        />

                        <Icon9Icon
                          data-plasmic-name={"eitaa3"}
                          data-plasmic-override={overrides.eitaa3}
                          className={classNames(projectcss.all, sty.eitaa3)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    link={(() => {
                      try {
                        return (() => {
                          return `https://t.me/share/url?text=پروفایل دکتر ${$state.fragmentprofile.data.name} در پذیرش۲۴&url=${$state.fragmentprofile.data.short_url}`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    showEndIcon={true}
                    target={true}
                  >
                    {"\u062a\u0644\u06af\u0631\u0627\u0645"}
                  </Button>
                  <Button
                    data-plasmic-name={"twitterButton"}
                    data-plasmic-override={overrides.twitterButton}
                    className={classNames("__wab_instance", sty.twitterButton)}
                    color={"twitter"}
                    endIcon={
                      <React.Fragment>
                        <Icon6Icon
                          data-plasmic-name={"x4"}
                          data-plasmic-override={overrides.x4}
                          className={classNames(projectcss.all, sty.x4)}
                          role={"img"}
                        />

                        <Icon5Icon
                          data-plasmic-name={"whatsapp4"}
                          data-plasmic-override={overrides.whatsapp4}
                          className={classNames(projectcss.all, sty.whatsapp4)}
                          role={"img"}
                        />

                        <Icon7Icon
                          data-plasmic-name={"telegram4"}
                          data-plasmic-override={overrides.telegram4}
                          className={classNames(projectcss.all, sty.telegram4)}
                          role={"img"}
                        />

                        <Icon9Icon
                          data-plasmic-name={"eitaa4"}
                          data-plasmic-override={overrides.eitaa4}
                          className={classNames(projectcss.all, sty.eitaa4)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    link={(() => {
                      try {
                        return (() => {
                          return `https://twitter.com/intent/tweet?text=پروفایل دکتر ${$state.fragmentprofile.data.name} در پذیرش۲۴&url=${$state.fragmentprofile.data.short_url}`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    target={true}
                  >
                    {"\u0627\u06cc\u06a9\u0633"}
                  </Button>
                </Stack__>
              </div>
            </ApiRequest>
            <ApiRequest
              data-plasmic-name={"fragmentbooking"}
              data-plasmic-override={overrides.fragmentbooking}
              className={classNames("__wab_instance", sty.fragmentbooking)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z83Fv
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.fragmentbooking.error.message;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Error fetching data";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
              loadingDisplay={
                <React.Fragment>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__myVcd)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bnYW
                    )}
                  >
                    {
                      "\u062f\u0631\u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a .."
                    }
                  </div>
                </React.Fragment>
              }
              method={"GET"}
              onError={generateStateOnChangeProp($state, [
                "fragmentbooking",
                "error"
              ])}
              onLoading={generateStateOnChangeProp($state, [
                "fragmentbooking",
                "loading"
              ])}
              onSuccess={generateStateOnChangeProp($state, [
                "fragmentbooking",
                "data"
              ])}
              params={(() => {
                try {
                  return {
                    user_id: $ctx.query.user_id
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              url={"https://srezas-n8n.darkube.app/webhook/shortener/booking"}
            >
              <div className={classNames(projectcss.all, sty.freeBox__t7UGh)}>
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__w4TXz
                  )}
                >
                  {
                    "\u0644\u06cc\u0646\u06a9 \u06a9\u0648\u062a\u0627\u0647 \u0635\u0641\u062d\u0647 \u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u0634\u0645\u0627"
                  }
                </h4>
                <Input
                  data-plasmic-name={"fragmentInput2"}
                  data-plasmic-override={overrides.fragmentInput2}
                  attributes={{ dir: "ltr" }}
                  className={classNames("__wab_instance", sty.fragmentInput2)}
                  disabled={true}
                  onChange={generateStateOnChangeProp($state, [
                    "fragmentInput2",
                    "value"
                  ])}
                  placeholder={``}
                  type={"text"}
                  value={generateStateValueProp($state, [
                    "fragmentInput2",
                    "value"
                  ])}
                />

                <Stack__
                  as={"div"}
                  data-plasmic-name={"shareButtons2"}
                  data-plasmic-override={overrides.shareButtons2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.shareButtons2)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__vvAeB)}
                    color={"softBlue"}
                    endIcon={
                      <React.Fragment>
                        <Icon14Icon
                          data-plasmic-name={"x8"}
                          data-plasmic-override={overrides.x8}
                          className={classNames(projectcss.all, sty.x8)}
                          role={"img"}
                        />

                        <Icon11Icon
                          data-plasmic-name={"whatsapp8"}
                          data-plasmic-override={overrides.whatsapp8}
                          className={classNames(projectcss.all, sty.whatsapp8)}
                          role={"img"}
                        />

                        <Icon7Icon
                          data-plasmic-name={"telegram8"}
                          data-plasmic-override={overrides.telegram8}
                          className={classNames(projectcss.all, sty.telegram8)}
                          role={"img"}
                        />

                        <Icon9Icon
                          data-plasmic-name={"eitaa8"}
                          data-plasmic-override={overrides.eitaa8}
                          className={classNames(projectcss.all, sty.eitaa8)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return $$.copyToClipboard(
                                  $state.fragmentInput2.value
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "\u0644\u06cc\u0646\u06a9 \u06a9\u067e\u06cc \u0634\u062f",
                                "top-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    showEndIcon={true}
                    startIcon={
                      <React.Fragment>
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__mEaCg)}
                          role={"img"}
                        />

                        <Icon13Icon
                          data-plasmic-name={"link5"}
                          data-plasmic-override={overrides.link5}
                          className={classNames(projectcss.all, sty.link5)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5JEg
                      )}
                    >
                      {"\u06a9\u067e\u06cc"}
                    </div>
                  </Button>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rv8Ms
                    )}
                  >
                    {
                      "\u06cc\u0627 \u0628\u0647 \u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0631\u06cc \u062f\u0631:"
                    }
                  </div>
                  <Button
                    data-plasmic-name={"eitaaButton2"}
                    data-plasmic-override={overrides.eitaaButton2}
                    className={classNames("__wab_instance", sty.eitaaButton2)}
                    color={"eitaa"}
                    endIcon={
                      <React.Fragment>
                        <Icon6Icon
                          data-plasmic-name={"x6"}
                          data-plasmic-override={overrides.x6}
                          className={classNames(projectcss.all, sty.x6)}
                          role={"img"}
                        />

                        <Icon5Icon
                          data-plasmic-name={"whatsapp6"}
                          data-plasmic-override={overrides.whatsapp6}
                          className={classNames(projectcss.all, sty.whatsapp6)}
                          role={"img"}
                        />

                        <Icon7Icon
                          data-plasmic-name={"telegram6"}
                          data-plasmic-override={overrides.telegram6}
                          className={classNames(projectcss.all, sty.telegram6)}
                          role={"img"}
                        />

                        <Icon9Icon
                          data-plasmic-name={"eitaa6"}
                          data-plasmic-override={overrides.eitaa6}
                          className={classNames(projectcss.all, sty.eitaa6)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    link={(() => {
                      try {
                        return (() => {
                          return `https://eitaa.com/share/url?url=${$state.fragmentbooking.data.short_url}`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    showEndIcon={true}
                    target={true}
                  >
                    {"\u0627\u06cc\u062a\u0627"}
                  </Button>
                  <Button
                    data-plasmic-name={"whatsappButton2"}
                    data-plasmic-override={overrides.whatsappButton2}
                    className={classNames(
                      "__wab_instance",
                      sty.whatsappButton2
                    )}
                    color={"whatsapp"}
                    endIcon={
                      <React.Fragment>
                        <Icon6Icon
                          data-plasmic-name={"x9"}
                          data-plasmic-override={overrides.x9}
                          className={classNames(projectcss.all, sty.x9)}
                          role={"img"}
                        />

                        <Icon11Icon
                          data-plasmic-name={"whatsapp9"}
                          data-plasmic-override={overrides.whatsapp9}
                          className={classNames(projectcss.all, sty.whatsapp9)}
                          role={"img"}
                        />

                        <Icon7Icon
                          data-plasmic-name={"telegram9"}
                          data-plasmic-override={overrides.telegram9}
                          className={classNames(projectcss.all, sty.telegram9)}
                          role={"img"}
                        />

                        <Icon9Icon
                          data-plasmic-name={"eitaa9"}
                          data-plasmic-override={overrides.eitaa9}
                          className={classNames(projectcss.all, sty.eitaa9)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    link={(() => {
                      try {
                        return (() => {
                          return `https://wa.me/?text=${$state.fragmentbooking.data.short_url}`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    showEndIcon={true}
                    target={true}
                  >
                    {"\u0648\u0627\u062a\u0633\u0627\u067e"}
                  </Button>
                  <Button
                    data-plasmic-name={"telegramButton2"}
                    data-plasmic-override={overrides.telegramButton2}
                    className={classNames(
                      "__wab_instance",
                      sty.telegramButton2
                    )}
                    color={"telegram"}
                    endIcon={
                      <React.Fragment>
                        <Icon6Icon
                          data-plasmic-name={"x10"}
                          data-plasmic-override={overrides.x10}
                          className={classNames(projectcss.all, sty.x10)}
                          role={"img"}
                        />

                        <Icon5Icon
                          data-plasmic-name={"whatsapp10"}
                          data-plasmic-override={overrides.whatsapp10}
                          className={classNames(projectcss.all, sty.whatsapp10)}
                          role={"img"}
                        />

                        <Icon7Icon
                          data-plasmic-name={"telegram10"}
                          data-plasmic-override={overrides.telegram10}
                          className={classNames(projectcss.all, sty.telegram10)}
                          role={"img"}
                        />

                        <Icon9Icon
                          data-plasmic-name={"eitaa10"}
                          data-plasmic-override={overrides.eitaa10}
                          className={classNames(projectcss.all, sty.eitaa10)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    link={(() => {
                      try {
                        return (() => {
                          return `https://t.me/share/url?text=پروفایل دکتر ${$state.fragmentbooking.data.name} در پذیرش۲۴&url=${$state.fragmentbooking.data.short_url}`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    showEndIcon={true}
                    target={true}
                  >
                    {"\u062a\u0644\u06af\u0631\u0627\u0645"}
                  </Button>
                  <Button
                    data-plasmic-name={"twitterButton2"}
                    data-plasmic-override={overrides.twitterButton2}
                    className={classNames("__wab_instance", sty.twitterButton2)}
                    color={"twitter"}
                    endIcon={
                      <React.Fragment>
                        <Icon6Icon
                          data-plasmic-name={"x11"}
                          data-plasmic-override={overrides.x11}
                          className={classNames(projectcss.all, sty.x11)}
                          role={"img"}
                        />

                        <Icon5Icon
                          data-plasmic-name={"whatsapp11"}
                          data-plasmic-override={overrides.whatsapp11}
                          className={classNames(projectcss.all, sty.whatsapp11)}
                          role={"img"}
                        />

                        <Icon7Icon
                          data-plasmic-name={"telegram11"}
                          data-plasmic-override={overrides.telegram11}
                          className={classNames(projectcss.all, sty.telegram11)}
                          role={"img"}
                        />

                        <Icon9Icon
                          data-plasmic-name={"eitaa11"}
                          data-plasmic-override={overrides.eitaa11}
                          className={classNames(projectcss.all, sty.eitaa11)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    link={(() => {
                      try {
                        return (() => {
                          return `https://twitter.com/intent/tweet?text=پروفایل دکتر ${$state.fragmentbooking.data.name} در پذیرش۲۴&url=${$state.fragmentbooking.data.short_url}`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    target={true}
                  >
                    {"\u0627\u06cc\u06a9\u0633"}
                  </Button>
                </Stack__>
              </div>
            </ApiRequest>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "h2",
    "fragmentprofile",
    "loadingSvg",
    "fragmentInput",
    "shareButtons",
    "link4",
    "x7",
    "whatsapp7",
    "telegram7",
    "eitaa7",
    "eitaaButton",
    "x5",
    "whatsapp5",
    "telegram5",
    "eitaa5",
    "whatsappButton",
    "x2",
    "whatsapp2",
    "telegram2",
    "eitaa2",
    "telegramButton",
    "x3",
    "whatsapp3",
    "telegram3",
    "eitaa3",
    "twitterButton",
    "x4",
    "whatsapp4",
    "telegram4",
    "eitaa4",
    "fragmentbooking",
    "fragmentInput2",
    "shareButtons2",
    "link5",
    "x8",
    "whatsapp8",
    "telegram8",
    "eitaa8",
    "eitaaButton2",
    "x6",
    "whatsapp6",
    "telegram6",
    "eitaa6",
    "whatsappButton2",
    "x9",
    "whatsapp9",
    "telegram9",
    "eitaa9",
    "telegramButton2",
    "x10",
    "whatsapp10",
    "telegram10",
    "eitaa10",
    "twitterButton2",
    "x11",
    "whatsapp11",
    "telegram11",
    "eitaa11"
  ],
  section: [
    "section",
    "h2",
    "fragmentprofile",
    "loadingSvg",
    "fragmentInput",
    "shareButtons",
    "link4",
    "x7",
    "whatsapp7",
    "telegram7",
    "eitaa7",
    "eitaaButton",
    "x5",
    "whatsapp5",
    "telegram5",
    "eitaa5",
    "whatsappButton",
    "x2",
    "whatsapp2",
    "telegram2",
    "eitaa2",
    "telegramButton",
    "x3",
    "whatsapp3",
    "telegram3",
    "eitaa3",
    "twitterButton",
    "x4",
    "whatsapp4",
    "telegram4",
    "eitaa4",
    "fragmentbooking",
    "fragmentInput2",
    "shareButtons2",
    "link5",
    "x8",
    "whatsapp8",
    "telegram8",
    "eitaa8",
    "eitaaButton2",
    "x6",
    "whatsapp6",
    "telegram6",
    "eitaa6",
    "whatsappButton2",
    "x9",
    "whatsapp9",
    "telegram9",
    "eitaa9",
    "telegramButton2",
    "x10",
    "whatsapp10",
    "telegram10",
    "eitaa10",
    "twitterButton2",
    "x11",
    "whatsapp11",
    "telegram11",
    "eitaa11"
  ],
  h2: ["h2"],
  fragmentprofile: [
    "fragmentprofile",
    "loadingSvg",
    "fragmentInput",
    "shareButtons",
    "link4",
    "x7",
    "whatsapp7",
    "telegram7",
    "eitaa7",
    "eitaaButton",
    "x5",
    "whatsapp5",
    "telegram5",
    "eitaa5",
    "whatsappButton",
    "x2",
    "whatsapp2",
    "telegram2",
    "eitaa2",
    "telegramButton",
    "x3",
    "whatsapp3",
    "telegram3",
    "eitaa3",
    "twitterButton",
    "x4",
    "whatsapp4",
    "telegram4",
    "eitaa4"
  ],
  loadingSvg: ["loadingSvg"],
  fragmentInput: ["fragmentInput"],
  shareButtons: [
    "shareButtons",
    "link4",
    "x7",
    "whatsapp7",
    "telegram7",
    "eitaa7",
    "eitaaButton",
    "x5",
    "whatsapp5",
    "telegram5",
    "eitaa5",
    "whatsappButton",
    "x2",
    "whatsapp2",
    "telegram2",
    "eitaa2",
    "telegramButton",
    "x3",
    "whatsapp3",
    "telegram3",
    "eitaa3",
    "twitterButton",
    "x4",
    "whatsapp4",
    "telegram4",
    "eitaa4"
  ],
  link4: ["link4"],
  x7: ["x7"],
  whatsapp7: ["whatsapp7"],
  telegram7: ["telegram7"],
  eitaa7: ["eitaa7"],
  eitaaButton: ["eitaaButton", "x5", "whatsapp5", "telegram5", "eitaa5"],
  x5: ["x5"],
  whatsapp5: ["whatsapp5"],
  telegram5: ["telegram5"],
  eitaa5: ["eitaa5"],
  whatsappButton: ["whatsappButton", "x2", "whatsapp2", "telegram2", "eitaa2"],
  x2: ["x2"],
  whatsapp2: ["whatsapp2"],
  telegram2: ["telegram2"],
  eitaa2: ["eitaa2"],
  telegramButton: ["telegramButton", "x3", "whatsapp3", "telegram3", "eitaa3"],
  x3: ["x3"],
  whatsapp3: ["whatsapp3"],
  telegram3: ["telegram3"],
  eitaa3: ["eitaa3"],
  twitterButton: ["twitterButton", "x4", "whatsapp4", "telegram4", "eitaa4"],
  x4: ["x4"],
  whatsapp4: ["whatsapp4"],
  telegram4: ["telegram4"],
  eitaa4: ["eitaa4"],
  fragmentbooking: [
    "fragmentbooking",
    "fragmentInput2",
    "shareButtons2",
    "link5",
    "x8",
    "whatsapp8",
    "telegram8",
    "eitaa8",
    "eitaaButton2",
    "x6",
    "whatsapp6",
    "telegram6",
    "eitaa6",
    "whatsappButton2",
    "x9",
    "whatsapp9",
    "telegram9",
    "eitaa9",
    "telegramButton2",
    "x10",
    "whatsapp10",
    "telegram10",
    "eitaa10",
    "twitterButton2",
    "x11",
    "whatsapp11",
    "telegram11",
    "eitaa11"
  ],
  fragmentInput2: ["fragmentInput2"],
  shareButtons2: [
    "shareButtons2",
    "link5",
    "x8",
    "whatsapp8",
    "telegram8",
    "eitaa8",
    "eitaaButton2",
    "x6",
    "whatsapp6",
    "telegram6",
    "eitaa6",
    "whatsappButton2",
    "x9",
    "whatsapp9",
    "telegram9",
    "eitaa9",
    "telegramButton2",
    "x10",
    "whatsapp10",
    "telegram10",
    "eitaa10",
    "twitterButton2",
    "x11",
    "whatsapp11",
    "telegram11",
    "eitaa11"
  ],
  link5: ["link5"],
  x8: ["x8"],
  whatsapp8: ["whatsapp8"],
  telegram8: ["telegram8"],
  eitaa8: ["eitaa8"],
  eitaaButton2: ["eitaaButton2", "x6", "whatsapp6", "telegram6", "eitaa6"],
  x6: ["x6"],
  whatsapp6: ["whatsapp6"],
  telegram6: ["telegram6"],
  eitaa6: ["eitaa6"],
  whatsappButton2: [
    "whatsappButton2",
    "x9",
    "whatsapp9",
    "telegram9",
    "eitaa9"
  ],
  x9: ["x9"],
  whatsapp9: ["whatsapp9"],
  telegram9: ["telegram9"],
  eitaa9: ["eitaa9"],
  telegramButton2: [
    "telegramButton2",
    "x10",
    "whatsapp10",
    "telegram10",
    "eitaa10"
  ],
  x10: ["x10"],
  whatsapp10: ["whatsapp10"],
  telegram10: ["telegram10"],
  eitaa10: ["eitaa10"],
  twitterButton2: [
    "twitterButton2",
    "x11",
    "whatsapp11",
    "telegram11",
    "eitaa11"
  ],
  x11: ["x11"],
  whatsapp11: ["whatsapp11"],
  telegram11: ["telegram11"],
  eitaa11: ["eitaa11"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  h2: "h2";
  fragmentprofile: typeof ApiRequest;
  loadingSvg: "svg";
  fragmentInput: typeof Input;
  shareButtons: "div";
  link4: "svg";
  x7: "svg";
  whatsapp7: "svg";
  telegram7: "svg";
  eitaa7: "svg";
  eitaaButton: typeof Button;
  x5: "svg";
  whatsapp5: "svg";
  telegram5: "svg";
  eitaa5: "svg";
  whatsappButton: typeof Button;
  x2: "svg";
  whatsapp2: "svg";
  telegram2: "svg";
  eitaa2: "svg";
  telegramButton: typeof Button;
  x3: "svg";
  whatsapp3: "svg";
  telegram3: "svg";
  eitaa3: "svg";
  twitterButton: typeof Button;
  x4: "svg";
  whatsapp4: "svg";
  telegram4: "svg";
  eitaa4: "svg";
  fragmentbooking: typeof ApiRequest;
  fragmentInput2: typeof Input;
  shareButtons2: "div";
  link5: "svg";
  x8: "svg";
  whatsapp8: "svg";
  telegram8: "svg";
  eitaa8: "svg";
  eitaaButton2: typeof Button;
  x6: "svg";
  whatsapp6: "svg";
  telegram6: "svg";
  eitaa6: "svg";
  whatsappButton2: typeof Button;
  x9: "svg";
  whatsapp9: "svg";
  telegram9: "svg";
  eitaa9: "svg";
  telegramButton2: typeof Button;
  x10: "svg";
  whatsapp10: "svg";
  telegram10: "svg";
  eitaa10: "svg";
  twitterButton2: typeof Button;
  x11: "svg";
  whatsapp11: "svg";
  telegram11: "svg";
  eitaa11: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h2: makeNodeComponent("h2"),
    fragmentprofile: makeNodeComponent("fragmentprofile"),
    loadingSvg: makeNodeComponent("loadingSvg"),
    fragmentInput: makeNodeComponent("fragmentInput"),
    shareButtons: makeNodeComponent("shareButtons"),
    link4: makeNodeComponent("link4"),
    x7: makeNodeComponent("x7"),
    whatsapp7: makeNodeComponent("whatsapp7"),
    telegram7: makeNodeComponent("telegram7"),
    eitaa7: makeNodeComponent("eitaa7"),
    eitaaButton: makeNodeComponent("eitaaButton"),
    x5: makeNodeComponent("x5"),
    whatsapp5: makeNodeComponent("whatsapp5"),
    telegram5: makeNodeComponent("telegram5"),
    eitaa5: makeNodeComponent("eitaa5"),
    whatsappButton: makeNodeComponent("whatsappButton"),
    x2: makeNodeComponent("x2"),
    whatsapp2: makeNodeComponent("whatsapp2"),
    telegram2: makeNodeComponent("telegram2"),
    eitaa2: makeNodeComponent("eitaa2"),
    telegramButton: makeNodeComponent("telegramButton"),
    x3: makeNodeComponent("x3"),
    whatsapp3: makeNodeComponent("whatsapp3"),
    telegram3: makeNodeComponent("telegram3"),
    eitaa3: makeNodeComponent("eitaa3"),
    twitterButton: makeNodeComponent("twitterButton"),
    x4: makeNodeComponent("x4"),
    whatsapp4: makeNodeComponent("whatsapp4"),
    telegram4: makeNodeComponent("telegram4"),
    eitaa4: makeNodeComponent("eitaa4"),
    fragmentbooking: makeNodeComponent("fragmentbooking"),
    fragmentInput2: makeNodeComponent("fragmentInput2"),
    shareButtons2: makeNodeComponent("shareButtons2"),
    link5: makeNodeComponent("link5"),
    x8: makeNodeComponent("x8"),
    whatsapp8: makeNodeComponent("whatsapp8"),
    telegram8: makeNodeComponent("telegram8"),
    eitaa8: makeNodeComponent("eitaa8"),
    eitaaButton2: makeNodeComponent("eitaaButton2"),
    x6: makeNodeComponent("x6"),
    whatsapp6: makeNodeComponent("whatsapp6"),
    telegram6: makeNodeComponent("telegram6"),
    eitaa6: makeNodeComponent("eitaa6"),
    whatsappButton2: makeNodeComponent("whatsappButton2"),
    x9: makeNodeComponent("x9"),
    whatsapp9: makeNodeComponent("whatsapp9"),
    telegram9: makeNodeComponent("telegram9"),
    eitaa9: makeNodeComponent("eitaa9"),
    telegramButton2: makeNodeComponent("telegramButton2"),
    x10: makeNodeComponent("x10"),
    whatsapp10: makeNodeComponent("whatsapp10"),
    telegram10: makeNodeComponent("telegram10"),
    eitaa10: makeNodeComponent("eitaa10"),
    twitterButton2: makeNodeComponent("twitterButton2"),
    x11: makeNodeComponent("x11"),
    whatsapp11: makeNodeComponent("whatsapp11"),
    telegram11: makeNodeComponent("telegram11"),
    eitaa11: makeNodeComponent("eitaa11"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
