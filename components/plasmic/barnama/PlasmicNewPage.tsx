// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v57deDbCRSiUfTDw1tW741
// Component: rHSCFPT8-FdV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: v57deDbCRSiUfTDw1tW741/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: rHSCFPT8-FdV/css

createPlasmicElementProxy;

export type PlasmicNewPage__VariantMembers = {};
export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: Flex__<"div">;
  p24Header?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  drImage?: Flex__<typeof PlasmicImg__>;
  drInfo?: Flex__<"div">;
  drName?: Flex__<"div">;
  experienceContainer?: Flex__<"div">;
  experienceIcon?: Flex__<typeof PlasmicImg__>;
  experience?: Flex__<"div">;
  doctoralId?: Flex__<"div">;
  qrcodes?: Flex__<"div">;
  bookingQrcode?: Flex__<typeof PlasmicImg__>;
  profileQrcode?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultNewPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicNewPage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicNewPage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicNewPage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"p24Header"}
            data-plasmic-override={overrides.p24Header}
            hasGap={true}
            className={classNames(projectcss.all, sty.p24Header)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__k4U7E
              )}
            >
              {"\u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4"}
            </div>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/barnama/images/image.svg",
                fullWidth: 102.473,
                fullHeight: 108.85,
                aspectRatio: 0.941415
              }}
            />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___41Z5M)}
            dir={"rtl"}
          >
            <PlasmicImg__
              data-plasmic-name={"drImage"}
              data-plasmic-override={overrides.drImage}
              alt={""}
              className={classNames(sty.drImage)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/barnama/images/image2.png",
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: undefined
              }}
            />

            <div
              data-plasmic-name={"drInfo"}
              data-plasmic-override={overrides.drInfo}
              className={classNames(projectcss.all, sty.drInfo)}
            >
              <div
                data-plasmic-name={"drName"}
                data-plasmic-override={overrides.drName}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.drName
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.query.doctor_name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u062f\u06a9\u062a\u0631 \u0641\u0631\u062d \u0646\u0627\u0632 \u0631\u0634\u06cc\u062f\u06cc";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"experienceContainer"}
                data-plasmic-override={overrides.experienceContainer}
                className={classNames(projectcss.all, sty.experienceContainer)}
              >
                <PlasmicImg__
                  data-plasmic-name={"experienceIcon"}
                  data-plasmic-override={overrides.experienceIcon}
                  alt={""}
                  className={classNames(sty.experienceIcon)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/barnama/images/image3.svg",
                    fullWidth: 24,
                    fullHeight: 24,
                    aspectRatio: 1
                  }}
                />

                <div
                  data-plasmic-name={"experience"}
                  data-plasmic-override={overrides.experience}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.experience
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.query.experience;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return " \u0628\u06cc\u0634\u200c\u0627\u0632 23 \u0633\u0627\u0644 \u062a\u062c\u0631\u0628\u0647";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"doctoralId"}
                data-plasmic-override={overrides.doctoralId}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.doctoralId
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return "شماره نظام پزشکی: " + $ctx.query.doctoral_id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0634\u0645\u0627\u0631\u0647 \u0646\u0638\u0627\u0645 \u067e\u0632\u0634\u06a9\u06cc: \u0645-37139";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </Stack__>
          <div
            data-plasmic-name={"qrcodes"}
            data-plasmic-override={overrides.qrcodes}
            className={classNames(projectcss.all, sty.qrcodes)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yDxeN)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cvToV
                )}
              >
                {
                  "\u0635\u0641\u062d\u0647 \u0646\u0648\u0628\u062a\u200c\u062f\u0647\u06cc \u067e\u0632\u0634\u06a9"
                }
              </div>
              <PlasmicImg__
                data-plasmic-name={"bookingQrcode"}
                data-plasmic-override={overrides.bookingQrcode}
                alt={""}
                className={classNames(sty.bookingQrcode)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={(() => {
                  try {
                    return (() => {
                      return (
                        "https://api.qrserver.com/v1/create-qr-code/?data=" +
                        $ctx.query.booking_url +
                        "&format=svg"
                      );
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bloVt
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.query.booking_url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jc4G)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rfQjn
                )}
              >
                {
                  "\u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u067e\u0632\u0634\u06a9 \u062f\u0631 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4"
                }
              </div>
              <PlasmicImg__
                data-plasmic-name={"profileQrcode"}
                data-plasmic-override={overrides.profileQrcode}
                alt={""}
                className={classNames(sty.profileQrcode)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={(() => {
                  try {
                    return (() => {
                      return (
                        "https://api.qrserver.com/v1/create-qr-code/?data=" +
                        $ctx.query.profile_url +
                        "&format=svg"
                      );
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d238L
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.query.profile_url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "p24Header",
    "img",
    "drImage",
    "drInfo",
    "drName",
    "experienceContainer",
    "experienceIcon",
    "experience",
    "doctoralId",
    "qrcodes",
    "bookingQrcode",
    "profileQrcode"
  ],
  p24Header: ["p24Header", "img"],
  img: ["img"],
  drImage: ["drImage"],
  drInfo: [
    "drInfo",
    "drName",
    "experienceContainer",
    "experienceIcon",
    "experience",
    "doctoralId"
  ],
  drName: ["drName"],
  experienceContainer: ["experienceContainer", "experienceIcon", "experience"],
  experienceIcon: ["experienceIcon"],
  experience: ["experience"],
  doctoralId: ["doctoralId"],
  qrcodes: ["qrcodes", "bookingQrcode", "profileQrcode"],
  bookingQrcode: ["bookingQrcode"],
  profileQrcode: ["profileQrcode"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  p24Header: "div";
  img: typeof PlasmicImg__;
  drImage: typeof PlasmicImg__;
  drInfo: "div";
  drName: "div";
  experienceContainer: "div";
  experienceIcon: typeof PlasmicImg__;
  experience: "div";
  doctoralId: "div";
  qrcodes: "div";
  bookingQrcode: typeof PlasmicImg__;
  profileQrcode: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    p24Header: makeNodeComponent("p24Header"),
    img: makeNodeComponent("img"),
    drImage: makeNodeComponent("drImage"),
    drInfo: makeNodeComponent("drInfo"),
    drName: makeNodeComponent("drName"),
    experienceContainer: makeNodeComponent("experienceContainer"),
    experienceIcon: makeNodeComponent("experienceIcon"),
    experience: makeNodeComponent("experience"),
    doctoralId: makeNodeComponent("doctoralId"),
    qrcodes: makeNodeComponent("qrcodes"),
    bookingQrcode: makeNodeComponent("bookingQrcode"),
    profileQrcode: makeNodeComponent("profileQrcode"),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Wallpaper",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
